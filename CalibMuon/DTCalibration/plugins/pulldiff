diff --git a/CalibMuon/DTCalibration/plugins/DTNoiseCalibration.cc b/CalibMuon/DTCalibration/plugins/DTNoiseCalibration.cc
index 6d7c3abd1cb..155a7b334cf 100644
--- a/CalibMuon/DTCalibration/plugins/DTNoiseCalibration.cc
+++ b/CalibMuon/DTCalibration/plugins/DTNoiseCalibration.cc
@@ -246,8 +246,7 @@ void DTNoiseCalibration::analyze(const edm::Event& event, const edm::EventSetup&
 	     (theHistoEvtPerWireMap.find(dtLId) != theHistoEvtPerWireMap.end() &&
 	      skippedPlot[dtLId] != counter)){ 
 	    skippedPlot[dtLId] = counter;
-	    stringstream toAppend; toAppend << counter;
-	    Histo2Name = "DigiPerWirePerEvent_" + getLayerName(dtLId) + "_" + toAppend.str();
+	    Histo2Name = "DigiPerWirePerEvent_" + getLayerName(dtLId) + "_" + std::to_string(counter);
 	    theFile->cd();
 	    hEvtPerWireH = new TH2F(Histo2Name.c_str(), Histo2Name.c_str(), 1000,0.5,1000.5,nWires, firstWire, lastWire+1);
 	    if(hEvtPerWireH){
@@ -418,29 +417,22 @@ DTNoiseCalibration::~DTNoiseCalibration(){
 }
 
 string DTNoiseCalibration::getChannelName(const DTWireId& wId) const{
-  stringstream channelName;
-  channelName << "Wh" << wId.wheel() << "_St" << wId.station() << "_Sec" << wId.sector()
-	      << "_SL" << wId.superlayer() << "_L" << wId.layer() << "_W"<< wId.wire();
-
-  return channelName.str();
+  string channelName = "Wh" + std::to_string(wId.wheel()) + "_St" + std::to_string(wId.station())
+                     + "_Sec" + std::to_string(wId.sector()) + "_SL" + std::to_string(wId.superlayer())
+                     + "_L" + std::to_string(wId.layer()) + "_W" + std::to_string(wId.wire());
+  return channelName;
 }
 
 string DTNoiseCalibration::getLayerName(const DTLayerId& lId) const{
 
   const  DTSuperLayerId dtSLId = lId.superlayerId();
   const  DTChamberId dtChId = dtSLId.chamberId(); 
-  stringstream Layer; Layer << lId.layer();
-  stringstream superLayer; superLayer << dtSLId.superlayer();
-  stringstream wheel; wheel << dtChId.wheel();	
-  stringstream station; station << dtChId.station();	
-  stringstream sector; sector << dtChId.sector();
-  
   string layerName = 
-    "W" + wheel.str()
-    + "_St" + station.str() 
-    + "_Sec" + sector.str() 
-    + "_SL" + superLayer.str()
-    + "_L" + Layer.str();
+    "W" + std::to_string(dtChId.wheel())
+    + "_St" + std::to_string(dtChId.station())
+    + "_Sec" + std::to_string(dtChId.sector())
+    + "_SL" + std::to_string(dtSLId.superlayer())
+    + "_L" + std::to_string(lId.layer());
   
   return layerName;
 }
@@ -448,30 +440,22 @@ string DTNoiseCalibration::getLayerName(const DTLayerId& lId) const{
 string DTNoiseCalibration::getSuperLayerName(const DTSuperLayerId& dtSLId) const{
 
   const  DTChamberId dtChId = dtSLId.chamberId(); 
-  stringstream superLayer; superLayer << dtSLId.superlayer();
-  stringstream wheel; wheel << dtChId.wheel();	
-  stringstream station; station << dtChId.station();	
-  stringstream sector; sector << dtChId.sector();
-  
+
   string superLayerName = 
-    "W" + wheel.str()
-    + "_St" + station.str() 
-    + "_Sec" + sector.str() 
-    + "_SL" + superLayer.str();
-  
+    "W" + std::to_string(dtChId.wheel())
+    + "_St" + std::to_string(dtChId.station())
+    + "_Sec" + std::to_string(dtChId.sector())
+    + "_SL" + std::to_string(dtSLId.superlayer());
+
   return superLayerName;
 }
 
 string DTNoiseCalibration::getChamberName(const DTChamberId& dtChId) const{
 
-  stringstream wheel; wheel << dtChId.wheel();
-  stringstream station; station << dtChId.station();
-  stringstream sector; sector << dtChId.sector();
-
   string chamberName =
-    "W" + wheel.str()
-    + "_St" + station.str()
-    + "_Sec" + sector.str();
+    "W" + std::to_string(dtChId.wheel())
+    + "_St" + std::to_string(dtChId.station())
+    + "_Sec" + std::to_string(dtChId.sector());
 
   return chamberName;
 }
diff --git a/CalibMuon/DTCalibration/plugins/DTNoiseComputation.cc b/CalibMuon/DTCalibration/plugins/DTNoiseComputation.cc
index 635a36f6e4e..7e68bbc3571 100644
--- a/CalibMuon/DTCalibration/plugins/DTNoiseComputation.cc
+++ b/CalibMuon/DTCalibration/plugins/DTNoiseComputation.cc
@@ -111,17 +111,17 @@ void DTNoiseComputation::beginRun(const edm::Run&, const EventSetup& setup)
 	  TH1F *hCheckHisto = (TH1F *) theFile->Get(CheckHistoName.c_str());
 	  if(hCheckHisto){  
 	    delete hCheckHisto;
-	    stringstream wheel; wheel << ch.wheel();	
-	    stringstream station; station << ch.station();
+	    string wheel = std::to_string(ch.wheel());
+	    string station = std::to_string(ch.station());
 	  
 	    if(someHowNoisyC.find(make_pair(ch.wheel(),ch.station())) == someHowNoisyC.end()) {
-	      TString histoName_someHowNoisy = "somehowNoisyCell_W"+wheel.str()+"_St"+station.str();
+	      TString histoName_someHowNoisy = "somehowNoisyCell_W"+wheel+"_St"+station;
 	      hsomeHowNoisyC = new TH1F(histoName_someHowNoisy,histoName_someHowNoisy,getMaxNumBins(ch),1,getMaxNumBins(ch)+1);
 	      someHowNoisyC[make_pair(ch.wheel(),ch.station())]=hsomeHowNoisyC;
 	    }
 	  
 	    if(noisyC.find(make_pair(ch.wheel(),ch.station())) == noisyC.end()) {
-	      TString histoName_noisy = "noisyCell_W"+wheel.str()+"_St"+station.str();
+	      TString histoName_noisy = "noisyCell_W"+wheel+"_St"+station;
 	      hnoisyC = new TH1F(histoName_noisy,histoName_noisy,getMaxNumBins(ch),1,getMaxNumBins(ch)+1);
 	      noisyC[make_pair(ch.wheel(),ch.station())]=hnoisyC;
 	    }
@@ -193,8 +193,7 @@ void DTNoiseComputation::beginRun(const edm::Run&, const EventSetup& setup)
 	    // book the digi event plots every 1000 events
 	    int updates = MaxEvents/1000; 
 	    for(int evt=0; evt<updates; evt++){
-	      stringstream toAppend; toAppend << evt;
-	      Histo2Name = "DigiPerWirePerEvent_" + getLayerName(dtLId) + "_" + toAppend.str();
+	      Histo2Name = "DigiPerWirePerEvent_" + getLayerName(dtLId) + "_" + std::to_string(evt);
 	      theFile->cd();
 	      hEvtHisto = (TH2F *) theFile->Get(Histo2Name.c_str());
 	      if(hEvtHisto){
@@ -237,8 +236,7 @@ void DTNoiseComputation::endJob(){
 	  else { 
 	    if(toDel.find(wire) == toDel.end()) {
 	      toDel[wire] = false;
-	      stringstream toAppend; toAppend << bin;
-	      string Histo = "EvtDistancePerWire_" + getLayerName((*lHisto).first) + "_" + toAppend.str();
+	      string Histo = "EvtDistancePerWire_" + getLayerName((*lHisto).first) + "_" + std::to_string(bin);
 	      hEvtDistance = new TH1F(Histo.c_str(),Histo.c_str(), 50000,0.5,50000.5);
 	    }
 	    hEvtDistance->Fill(distanceEvt); 
@@ -350,8 +348,7 @@ void DTNoiseComputation::endJob(){
 	  string TitleHisto = "AverageNoise_" + getSuperLayerName(sl);
 	  cout<<"TitleHisto : "<<TitleHisto<<endl;
 	  hOccHisto->SetTitle(TitleHisto.c_str());
-	  stringstream layer; layer << layerId.layer();	
-	  string legendHisto = "layer " + layer.str();
+	  string legendHisto = "layer " + std::to_string(layerId.layer());
 	  leg->AddEntry(hOccHisto,legendHisto.c_str(),"L");
 	  hOccHisto->SetMaximum(getYMaximum(sl));
 	  histo=true;
@@ -400,40 +397,28 @@ string DTNoiseComputation::getLayerName(const DTLayerId& lId) const {
 
   const  DTSuperLayerId dtSLId = lId.superlayerId();
   const  DTChamberId dtChId = dtSLId.chamberId(); 
-  stringstream Layer; Layer << lId.layer();
-  stringstream superLayer; superLayer << dtSLId.superlayer();
-  stringstream wheel; wheel << dtChId.wheel();	
-  stringstream station; station << dtChId.station();	
-  stringstream sector; sector << dtChId.sector();
-  
-  string LayerName = 
-    "W" + wheel.str()
-    + "_St" + station.str() 
-    + "_Sec" + sector.str() 
-    + "_SL" + superLayer.str()
-    + "_L" + Layer.str();
-  
-  return LayerName;
-
+  string layerName = 
+    "W" + std::to_string(dtChId.wheel())
+    + "_St" + std::to_string(dtChId.station())
+    + "_Sec" + std::to_string(dtChId.sector())
+    + "_SL" + std::to_string(dtSLId.superlayer())
+    + "_L" + std::to_string(lId.layer());
+
+  return layerName;
 }
 
 
 string DTNoiseComputation::getSuperLayerName(const DTSuperLayerId& dtSLId) const {
 
   const  DTChamberId dtChId = dtSLId.chamberId(); 
-  stringstream superLayer; superLayer << dtSLId.superlayer();
-  stringstream wheel; wheel << dtChId.wheel();	
-  stringstream station; station << dtChId.station();	
-  stringstream sector; sector << dtChId.sector();
-  
-  string SuperLayerName = 
-    "W" + wheel.str()
-    + "_St" + station.str() 
-    + "_Sec" + sector.str() 
-    + "_SL" + superLayer.str();
-  
-  return SuperLayerName;
 
+  string superLayerName = 
+    "W" + std::to_string(dtChId.wheel())
+    + "_St" + std::to_string(dtChId.station())
+    + "_Sec" + std::to_string(dtChId.sector())
+    + "_SL" + std::to_string(dtSLId.superlayer());
+
+  return superLayerName;
 }
 
 
@@ -441,17 +426,12 @@ string DTNoiseComputation::getChamberName(const DTLayerId& lId) const {
 
   const  DTSuperLayerId dtSLId = lId.superlayerId();
   const  DTChamberId dtChId = dtSLId.chamberId(); 
-  stringstream wheel; wheel << dtChId.wheel();	
-  stringstream station; station << dtChId.station();	
-  stringstream sector; sector << dtChId.sector();
-  
-  string ChamberName = 
-    "W" + wheel.str()
-    + "_St" + station.str() 
-    + "_Sec" + sector.str();
-  
-  return ChamberName;
+  string chamberName =
+    "W" + std::to_string(dtChId.wheel())
+    + "_St" + std::to_string(dtChId.station())
+    + "_Sec" + std::to_string(dtChId.sector());
 
+  return chamberName;
 }
 
 
diff --git a/CalibMuon/DTCalibration/plugins/DTResidualCalibration.cc b/CalibMuon/DTCalibration/plugins/DTResidualCalibration.cc
index c7090c84ffe..c1b1f65d8b6 100644
--- a/CalibMuon/DTCalibration/plugins/DTResidualCalibration.cc
+++ b/CalibMuon/DTCalibration/plugins/DTResidualCalibration.cc
@@ -69,25 +69,19 @@ void DTResidualCalibration::beginRun(const edm::Run& run, const edm::EventSetup&
 
   // Loop over all the chambers
   if(histoMapTH1F_.empty()) {
-     auto ch_it = dtGeom_->chambers().begin();
-     auto ch_end = dtGeom_->chambers().end();
-     for (; ch_it != ch_end; ++ch_it) {
-        std::vector<const DTSuperLayer*>::const_iterator sl_it = (*ch_it)->superLayers().begin();
-        std::vector<const DTSuperLayer*>::const_iterator sl_end = (*ch_it)->superLayers().end();
-        // Loop over the SLs
-        for(; sl_it != sl_end; ++sl_it) {
-           DTSuperLayerId slId = (*sl_it)->id();
-           bookHistos(slId);
-           if(detailedAnalysis_) {
-              std::vector<const DTLayer*>::const_iterator layer_it = (*sl_it)->layers().begin();
-              std::vector<const DTLayer*>::const_iterator layer_end = (*sl_it)->layers().end();
-              for(; layer_it != layer_end; ++layer_it) {
-                DTLayerId layerId = (*layer_it)->id();
-                bookHistos(layerId);
-              }
-           }
+    for (auto ch_it : dtGeom_->chambers()) {
+      // Loop over the SLs
+      for (auto sl_it : ch_it->superLayers()) {
+        DTSuperLayerId slId = (sl_it)->id();
+        bookHistos(slId);
+        if(detailedAnalysis_) {
+          for (auto layer_it : (sl_it)->layers()) {
+            DTLayerId layerId = (layer_it)->id();
+            bookHistos(layerId);
+          }
         }
-     }
+      }
+    }
   }
 }
 
@@ -206,42 +200,35 @@ void DTResidualCalibration::bookHistos(DTSuperLayerId slId) {
   edm::LogVerbatim("Calibration") << "[DTResidualCalibration] Booking histos for SL: " << slId;
 
   // Compose the chamber name
-  std::stringstream wheelStr; wheelStr << slId.wheel();
-  std::stringstream stationStr; stationStr << slId.station();
-  std::stringstream sectorStr; sectorStr << slId.sector();
-  std::stringstream superLayerStr; superLayerStr << slId.superlayer();
   // Define the step
   int step = 3;
-  std::stringstream stepStr; stepStr << step;
+
+  std::string wheelStr = std::to_string(slId.wheel());
+  std::string stationStr = std::to_string(slId.station());
+  std::string sectorStr = std::to_string(slId.sector());
 
   std::string slHistoName =
-    "_STEP" + stepStr.str() +
-    "_W" + wheelStr.str() +
-    "_St" + stationStr.str() +
-    "_Sec" + sectorStr.str() +
-    "_SL" + superLayerStr.str();
+    "_STEP" + std::to_string(step) +
+    "_W" + wheelStr +
+    "_St" + stationStr +
+    "_Sec" +  sectorStr +
+    "_SL" + std::to_string(slId.superlayer());
 
   edm::LogVerbatim("Calibration") << "Accessing " << rootBaseDir_;
   TDirectory* baseDir = rootFile_->GetDirectory(rootBaseDir_.c_str());
   if(!baseDir) baseDir = rootFile_->mkdir(rootBaseDir_.c_str());
-  edm::LogVerbatim("Calibration") << "Accessing " << ("Wheel" + wheelStr.str());
-  TDirectory* wheelDir = baseDir->GetDirectory(("Wheel" + wheelStr.str()).c_str());
-  if(!wheelDir) wheelDir = baseDir->mkdir(("Wheel" + wheelStr.str()).c_str());
-  edm::LogVerbatim("Calibration") << "Accessing " << ("Station" + stationStr.str());
-  TDirectory* stationDir = wheelDir->GetDirectory(("Station" + stationStr.str()).c_str());
-  if(!stationDir) stationDir = wheelDir->mkdir(("Station" + stationStr.str()).c_str());
-  edm::LogVerbatim("Calibration") << "Accessing " << ("Sector" + sectorStr.str());
-  TDirectory* sectorDir = stationDir->GetDirectory(("Sector" + sectorStr.str()).c_str());
-  if(!sectorDir) sectorDir = stationDir->mkdir(("Sector" + sectorStr.str()).c_str()); 
-
-  /*std::string dirName = rootBaseDir_ + "/Wheel" + wheelStr.str() +
-                                       "/Station" + stationStr.str() +
-                                       "/Sector" + sectorStr.str();
-
-  TDirectory* dir = rootFile_->GetDirectory(dirName.c_str());
-  if(!dir) dir = rootFile_->mkdir(dirName.c_str());
-  dir->cd();*/
+  edm::LogVerbatim("Calibration") << "Accessing " << ("Wheel" + wheelStr);
+  TDirectory* wheelDir = baseDir->GetDirectory(("Wheel" + wheelStr).c_str());
+  if(!wheelDir) wheelDir = baseDir->mkdir(("Wheel" + wheelStr).c_str());
+  edm::LogVerbatim("Calibration") << "Accessing " << ("Station" + stationStr);
+  TDirectory* stationDir = wheelDir->GetDirectory(("Station" + stationStr).c_str());
+  if(!stationDir) stationDir = wheelDir->mkdir(("Station" + stationStr).c_str());
+  edm::LogVerbatim("Calibration") << "Accessing " << ("Sector" + sectorStr);
+  TDirectory* sectorDir = stationDir->GetDirectory(("Sector" + sectorStr).c_str());
+  if(!sectorDir) sectorDir = stationDir->mkdir(("Sector" + sectorStr).c_str()); 
+
   sectorDir->cd();
+
   // Create the monitor elements
   std::vector<TH1F*> histosTH1F;
   histosTH1F.push_back(new TH1F(("hResDist"+slHistoName).c_str(),
@@ -262,38 +249,37 @@ void DTResidualCalibration::bookHistos(DTLayerId layerId) {
   edm::LogVerbatim("Calibration") << "[DTResidualCalibration] Booking histos for layer: " << layerId;
 
   // Compose the chamber name
-  std::stringstream wheelStr; wheelStr << layerId.wheel();
-  std::stringstream stationStr; stationStr << layerId.station();
-  std::stringstream sectorStr; sectorStr << layerId.sector();
-  std::stringstream superLayerStr; superLayerStr << layerId.superlayer();
-  std::stringstream layerStr; layerStr << layerId.layer();
+  std::string wheelStr = std::to_string(layerId.wheel());
+  std::string stationStr = std::to_string(layerId.station());
+  std::string sectorStr = std::to_string(layerId.sector());
+  std::string superLayerStr = std::to_string(layerId.superlayer());
+  std::string layerStr = std::to_string(layerId.layer());
   // Define the step
   int step = 3;
-  std::stringstream stepStr; stepStr << step;
 
   std::string layerHistoName =
-    "_STEP" + stepStr.str() +
-    "_W" + wheelStr.str() +
-    "_St" + stationStr.str() +
-    "_Sec" + sectorStr.str() +
-    "_SL" + superLayerStr.str() + 
-    "_Layer" + layerStr.str();
+    "_STEP" + std::to_string(step) +
+    "_W" + wheelStr +
+    "_St" + stationStr +
+    "_Sec" + sectorStr +
+    "_SL" + superLayerStr + 
+    "_Layer" + layerStr;
   
   edm::LogVerbatim("Calibration") << "Accessing " << rootBaseDir_;
   TDirectory* baseDir = rootFile_->GetDirectory(rootBaseDir_.c_str());
   if(!baseDir) baseDir = rootFile_->mkdir(rootBaseDir_.c_str());
-  edm::LogVerbatim("Calibration") << "Accessing " << ("Wheel" + wheelStr.str());
-  TDirectory* wheelDir = baseDir->GetDirectory(("Wheel" + wheelStr.str()).c_str());
-  if(!wheelDir) wheelDir = baseDir->mkdir(("Wheel" + wheelStr.str()).c_str());
-  edm::LogVerbatim("Calibration") << "Accessing " << ("Station" + stationStr.str());
-  TDirectory* stationDir = wheelDir->GetDirectory(("Station" + stationStr.str()).c_str());
-  if(!stationDir) stationDir = wheelDir->mkdir(("Station" + stationStr.str()).c_str());
-  edm::LogVerbatim("Calibration") << "Accessing " << ("Sector" + sectorStr.str());
-  TDirectory* sectorDir = stationDir->GetDirectory(("Sector" + sectorStr.str()).c_str());
-  if(!sectorDir) sectorDir = stationDir->mkdir(("Sector" + sectorStr.str()).c_str()); 
-  edm::LogVerbatim("Calibration") << "Accessing " << ("SL" + superLayerStr.str());
-  TDirectory* superLayerDir = sectorDir->GetDirectory(("SL" + superLayerStr.str()).c_str());
-  if(!superLayerDir) superLayerDir = sectorDir->mkdir(("SL" + superLayerStr.str()).c_str()); 
+  edm::LogVerbatim("Calibration") << "Accessing " << ("Wheel" + wheelStr);
+  TDirectory* wheelDir = baseDir->GetDirectory(("Wheel" + wheelStr).c_str());
+  if(!wheelDir) wheelDir = baseDir->mkdir(("Wheel" + wheelStr).c_str());
+  edm::LogVerbatim("Calibration") << "Accessing " << ("Station" + stationStr);
+  TDirectory* stationDir = wheelDir->GetDirectory(("Station" + stationStr).c_str());
+  if(!stationDir) stationDir = wheelDir->mkdir(("Station" + stationStr).c_str());
+  edm::LogVerbatim("Calibration") << "Accessing " << ("Sector" + sectorStr);
+  TDirectory* sectorDir = stationDir->GetDirectory(("Sector" + sectorStr).c_str());
+  if(!sectorDir) sectorDir = stationDir->mkdir(("Sector" + sectorStr).c_str()); 
+  edm::LogVerbatim("Calibration") << "Accessing " << ("SL" + superLayerStr);
+  TDirectory* superLayerDir = sectorDir->GetDirectory(("SL" + superLayerStr).c_str());
+  if(!superLayerDir) superLayerDir = sectorDir->mkdir(("SL" + superLayerStr).c_str()); 
 
   superLayerDir->cd();
   // Create histograms
diff --git a/CalibMuon/DTCalibration/plugins/DTResidualHistory.cc b/CalibMuon/DTCalibration/plugins/DTResidualHistory.cc
index b1414414d07..96441978659 100644
--- a/CalibMuon/DTCalibration/plugins/DTResidualHistory.cc
+++ b/CalibMuon/DTCalibration/plugins/DTResidualHistory.cc
@@ -79,31 +79,25 @@ void DTResidualHistory::analyze(const edm::Event& event, const edm::EventSetup&
   ++nevent;
   unsigned int run = event.id().run();
   if (run!=lastrun) {
-     TH1AddDirectorySentry addDir;
-     histoMapTH1F_.clear();
-     auto ch_it = dtGeom_->chambers().begin(); 	 
-     auto ch_end = dtGeom_->chambers().end(); 	 
-     for (; ch_it != ch_end; ++ch_it) { 	 
-        std::vector<const DTSuperLayer*>::const_iterator sl_it = (*ch_it)->superLayers().begin(); 	 
-        std::vector<const DTSuperLayer*>::const_iterator sl_end = (*ch_it)->superLayers().end(); 	 
-        // Loop over the SLs 	 
-        for(; sl_it != sl_end; ++sl_it) { 
-           DTSuperLayerId slId = (*sl_it)->id();
-           bookHistos(slId,run);
-           if(detailedAnalysis_) {
-	      std::vector<const DTLayer*>::const_iterator layer_it = (*sl_it)->layers().begin(); 	 
-	      std::vector<const DTLayer*>::const_iterator layer_end = (*sl_it)->layers().end();
-	      for(; layer_it != layer_end; ++layer_it) { 
-		 DTLayerId layerId = (*layer_it)->id();
-		 bookHistos(layerId,run);
-              }
-           }
+    TH1AddDirectorySentry addDir;
+    histoMapTH1F_.clear();
+    for (auto ch_it : dtGeom_->chambers()) {
+      // Loop over the SLs
+      for (auto sl_it : ch_it->superLayers()) {
+        DTSuperLayerId slId = (sl_it)->id();
+        bookHistos(slId,run);
+        if(detailedAnalysis_) {
+          for (auto layer_it : (sl_it)->layers()) {
+            DTLayerId layerId = (layer_it)->id();
+            bookHistos(layerId,run);
+          }
         }
-      }    
+      }
+    }
 
-    std::stringstream runStr; runStr << run;
-    TDirectory* baseDir = rootFile_->GetDirectory(("Run"+runStr.str()).c_str());
-    if(!baseDir) baseDir = rootFile_->mkdir(("Run"+runStr.str()).c_str());
+    std::string runStr = "Run" + std::to_string(run);
+    TDirectory* baseDir = rootFile_->GetDirectory(runStr.c_str());
+    if(!baseDir) baseDir = rootFile_->mkdir(runStr.c_str());
     baseDir->cd();
     histoResLs = new TH2F("histoResLs","Residuals vs Lumisection",100,0,10000,100,-1,1);
     std::vector<TH2F*> histosTH2F;
@@ -202,39 +196,29 @@ void DTResidualHistory::bookHistos(DTSuperLayerId slId, unsigned int run) {
   cout << "[DTResidualHistory] Booking histos for SL: " << slId << endl;
 
   // Compose the chamber name
-  std::stringstream runStr; runStr << run;
-  std::stringstream wheelStr; wheelStr << slId.wheel();
-  std::stringstream stationStr; stationStr << slId.station();
-  std::stringstream sectorStr; sectorStr << slId.sector();
-  std::stringstream superLayerStr; superLayerStr << slId.superlayer();
+  std::string runStr = "Run" + std::to_string(run);
+  std::string wheelStr = std::to_string(slId.wheel());
   // Define the step
   int step = 3;
-  std::stringstream stepStr; stepStr << step;
 
   std::string slHistoName =
-    "_STEP" + stepStr.str() +
-    "_W" + wheelStr.str() +
-    "_St" + stationStr.str() +
-    "_Sec" + sectorStr.str() +
-    "_SL" + superLayerStr.str();
-  
-  TDirectory* baseDir = rootFile_->GetDirectory(("Run"+runStr.str()).c_str());
-  if(!baseDir) baseDir = rootFile_->mkdir(("Run"+runStr.str()).c_str());
-
-  TDirectory* wheelDir = baseDir->GetDirectory(("Wheel" + wheelStr.str()).c_str());
-  if(!wheelDir) wheelDir = baseDir->mkdir(("Wheel" + wheelStr.str()).c_str());
+    "_STEP" + std::to_string(step) +
+    "_W" + wheelStr +
+    "_St" + std::to_string(slId.station()) +
+    "_Sec" + std::to_string(slId.sector()) +
+    "_SL" + std::to_string(slId.superlayer());
 
-//  TDirectory* stationDir = wheelDir->GetDirectory(("Station" + stationStr.str()).c_str());
-//  if(!stationDir) stationDir = wheelDir->mkdir(("Station" + stationStr.str()).c_str());
+  TDirectory* baseDir = rootFile_->GetDirectory((runStr).c_str());
+  if(!baseDir) baseDir = rootFile_->mkdir((runStr).c_str());
 
-//  TDirectory* sectorDir = stationDir->GetDirectory(("Sector" + sectorStr.str()).c_str());
-//  if(!sectorDir) sectorDir = stationDir->mkdir(("Sector" + sectorStr.str()).c_str()); 
+  TDirectory* wheelDir = baseDir->GetDirectory(("Wheel" + wheelStr).c_str());
+  if(!wheelDir) wheelDir = baseDir->mkdir(("Wheel" + wheelStr).c_str());
 
   wheelDir->cd();
   // Create the monitor elements
   std::vector<TH1F*> histosTH1F;
   histosTH1F.push_back(new TH1F(("hRes"+slHistoName).c_str(),
-				 "Residuals on the dist. (cm) from wire (rec_hit - segm_extr)",
+                                 "Residuals on the dist. (cm) from wire (rec_hit - segm_extr)",
                                  200, -1., 1.));
   histoMapTH1F_[slId] = histosTH1F;
   
@@ -247,62 +231,44 @@ void DTResidualHistory::bookHistos(DTLayerId layerId, unsigned int run) {
   cout << "[DTResidualHistory] Booking histos for layer: " << layerId << endl;
 
   // Compose the chamber name
-  std::stringstream runStr; runStr << run;
-  std::stringstream wheelStr; wheelStr << layerId.wheel();
-  std::stringstream stationStr; stationStr << layerId.station();
-  std::stringstream sectorStr; sectorStr << layerId.sector();
-  std::stringstream superLayerStr; superLayerStr << layerId.superlayer();
-  std::stringstream layerStr; layerStr << layerId.layer();
+  std::string runStr = "Run" + std::to_string(run);
+  std::string wheelStr = std::to_string(layerId.wheel());
   // Define the step
   int step = 3;
-  std::stringstream stepStr; stepStr << step;
 
   std::string layerHistoName =
-    "_STEP" + stepStr.str() +
-    "_W" + wheelStr.str() +
-    "_St" + stationStr.str() +
-    "_Sec" + sectorStr.str() +
-    "_SL" + superLayerStr.str() + 
-    "_Layer" + layerStr.str();
-  
-  TDirectory* baseDir = rootFile_->GetDirectory(("Run"+runStr.str()).c_str());
-  if(!baseDir) baseDir = rootFile_->mkdir(("Run"+runStr.str()).c_str());
+    "_STEP" + std::to_string(step) +
+    "_W" + wheelStr +
+    "_St" + std::to_string(layerId.station()) +
+    "_Sec" + std::to_string(layerId.sector()) +
+    "_SL" + std::to_string(layerId.superlayer()) +
+    "_Layer" + std::to_string(layerId.layer());
 
-  TDirectory* wheelDir = baseDir->GetDirectory(("Wheel" + wheelStr.str()).c_str());
-  if(!wheelDir) wheelDir = baseDir->mkdir(("Wheel" + wheelStr.str()).c_str());
-/*
-  edm::LogVerbatim("Calibration") << "Accessing " << ("Station" + stationStr.str());
-  TDirectory* stationDir = wheelDir->GetDirectory(("Station" + stationStr.str()).c_str());
-  if(!stationDir) stationDir = wheelDir->mkdir(("Station" + stationStr.str()).c_str());
-  edm::LogVerbatim("Calibration") << "Accessing " << ("Sector" + sectorStr.str());
-  TDirectory* sectorDir = stationDir->GetDirectory(("Sector" + sectorStr.str()).c_str());
-  if(!sectorDir) sectorDir = stationDir->mkdir(("Sector" + sectorStr.str()).c_str()); 
-  edm::LogVerbatim("Calibration") << "Accessing " << ("SL" + superLayerStr.str());
-  TDirectory* superLayerDir = sectorDir->GetDirectory(("SL" + superLayerStr.str()).c_str());
-  if(!superLayerDir) superLayerDir = sectorDir->mkdir(("SL" + superLayerStr.str()).c_str()); 
-*/
+  TDirectory* baseDir = rootFile_->GetDirectory((runStr).c_str());
+  if(!baseDir) baseDir = rootFile_->mkdir((runStr).c_str());
+
+  TDirectory* wheelDir = baseDir->GetDirectory(("Wheel" + wheelStr).c_str());
+  if(!wheelDir) wheelDir = baseDir->mkdir(("Wheel" + wheelStr).c_str());
 
   wheelDir->cd();
 
   // Create histograms
   std::vector<TH1F*> histosTH1F;
   histosTH1F.push_back(new TH1F(("hRes"+layerHistoName).c_str(),
-				 "Residuals on the dist. (cm) from wire (rec_hit - segm_extr)",
+                                 "Residuals on the dist. (cm) from wire (rec_hit - segm_extr)",
                                  200, -1., 1.));
   histoMapPerLayerTH1F_[layerId] = histosTH1F;
 }
 
 // Fill a set of histograms for a given SL 
-void DTResidualHistory::fillHistos(DTSuperLayerId slId,
-				       float residualOnDistance) {
-  std::vector<TH1F*> const& histosTH1F = histoMapTH1F_[slId];                          
+void DTResidualHistory::fillHistos(DTSuperLayerId slId, float residualOnDistance) {
+  std::vector<TH1F*> const& histosTH1F = histoMapTH1F_[slId];
   histosTH1F[0]->Fill(residualOnDistance);
 }
 
 // Fill a set of histograms for a given layer 
-void DTResidualHistory::fillHistos(DTLayerId layerId,
-				       float residualOnDistance) {
-  std::vector<TH1F*> const& histosTH1F = histoMapPerLayerTH1F_[layerId];                          
+void DTResidualHistory::fillHistos(DTLayerId layerId, float residualOnDistance) {
+  std::vector<TH1F*> const& histosTH1F = histoMapPerLayerTH1F_[layerId];
   histosTH1F[0]->Fill(residualOnDistance);
 }
 
diff --git a/CalibMuon/DTCalibration/plugins/DTT0Calibration.cc b/CalibMuon/DTCalibration/plugins/DTT0Calibration.cc
index 1cd9777e9d0..3fb8b6c38a6 100644
--- a/CalibMuon/DTCalibration/plugins/DTT0Calibration.cc
+++ b/CalibMuon/DTCalibration/plugins/DTT0Calibration.cc
@@ -1,5 +1,7 @@
 /*
  *  See header file for a description of this class.
+ *
+ *  \author S. Bolognesi - INFN Torino
  */
 #include "CalibMuon/DTCalibration/plugins/DTT0Calibration.h"
 #include "CalibMuon/DTCalibration/interface/DTCalibDBUtils.h"
@@ -481,19 +483,15 @@ void DTT0Calibration::endJob() {
 }
 
 string DTT0Calibration::getHistoName(const DTWireId& wId) const {
-  string histoName;
-  stringstream theStream;
-  theStream << "Ch_" << wId.wheel() << "_" << wId.station() << "_" << wId.sector()
-	    << "_SL" << wId.superlayer() << "_L" << wId.layer() << "_W"<< wId.wire() <<"_hT0Histo";
-  theStream >> histoName;
+  string histoName = "Ch_" + std::to_string(wId.wheel()) + "_" + std::to_string(wId.station())
+                     + "_" + std::to_string(wId.sector()) + "_SL" + std::to_string(wId.superlayer()) 
+                     + "_L" + std::to_string(wId.layer()) + "_W" + std::to_string(wId.wire()) + "_hT0Histo";
   return histoName;
 }
 
 string DTT0Calibration::getHistoName(const DTLayerId& lId) const {
-  string histoName;
-  stringstream theStream;
-  theStream << "Ch_" << lId.wheel() << "_" << lId.station() << "_" << lId.sector()
-	    << "_SL" << lId.superlayer() << "_L" << lId.layer() <<"_hT0Histo";
-  theStream >> histoName;
+  string histoName = "Ch_" + std::to_string(lId.wheel()) + "_" + std::to_string(lId.station())
+                     + "_" + std::to_string(lId.sector()) + "_SL" + std::to_string(lId.superlayer()) 
+                     + "_L" + std::to_string(lId.layer()) + "_hT0Histo";
   return histoName;
 }
diff --git a/CalibMuon/DTCalibration/plugins/DTTTrigOffsetCalibration.cc b/CalibMuon/DTCalibration/plugins/DTTTrigOffsetCalibration.cc
index 01e1a5ef964..ba9989696dd 100644
--- a/CalibMuon/DTCalibration/plugins/DTTTrigOffsetCalibration.cc
+++ b/CalibMuon/DTCalibration/plugins/DTTTrigOffsetCalibration.cc
@@ -181,32 +181,14 @@ void DTTTrigOffsetCalibration::bookHistos(DTChamberId chId) {
   LogTrace("Calibration") << "   Booking histos for Chamber: " << chId;
 
   // Compose the chamber name
-  stringstream wheel; wheel << chId.wheel();
-  stringstream station; station << chId.station();
-  stringstream sector; sector << chId.sector();
+  std::string wheel = std::to_string(chId.wheel());
+  std::string station = std::to_string(chId.station());
+  std::string sector = std::to_string(chId.sector());
 
   string chHistoName =
-    "_W" + wheel.str() +
-    "_St" + station.str() +
-    "_Sec" + sector.str();
-
-  /*// Define the step
-  stringstream Step; Step << step;
-
-  string chHistoName =
-    "_STEP" + Step.str() +
-    "_W" + wheel.str() +
-    "_St" + station.str() +
-    "_Sec" + sector.str();
-
-  theDbe->setCurrentFolder("DT/DTCalibValidation/Wheel" + wheel.str() +
-                           "/Station" + station.str() +
-                           "/Sector" + sector.str());
-  // Create the monitor elements
-  vector<MonitorElement *> histos;
-  // Note hte order matters
-  histos.push_back(theDbe->book1D("hRPhiSegT0"+chHistoName, "t0 from Phi segments", 200, -25., 25.));
-  histos.push_back(theDbe->book1D("hRZSegT0"+chHistoName, "t0 from Z segments", 200, -25., 25.));*/
+    "_W" + wheel +
+    "_St" + station +
+    "_Sec" +  sector;
 
   vector<TH1F*> histos;
   // Note the order matters
diff --git a/CalibMuon/DTCalibration/plugins/DTTTrigResidualCorrection.cc b/CalibMuon/DTCalibration/plugins/DTTTrigResidualCorrection.cc
index 04fd52d324b..3982e4248bb 100644
--- a/CalibMuon/DTCalibration/plugins/DTTTrigResidualCorrection.cc
+++ b/CalibMuon/DTCalibration/plugins/DTTTrigResidualCorrection.cc
@@ -158,21 +158,16 @@ const TH1F* DTTTrigResidualCorrection::getHisto(const DTSuperLayerId& slId) {
 string DTTTrigResidualCorrection::getHistoName(const DTSuperLayerId& slId) {
 
   int step = 3;
-  stringstream wheel; wheel << slId.wheel();
-  stringstream station; station << slId.station();
-  stringstream sector; sector << slId.sector();
-  stringstream superLayer; superLayer << slId.superlayer();
-  stringstream Step; Step << step;
+
+  std::string wheel = std::to_string(slId.wheel());
+  std::string station = std::to_string(slId.station());
+  std::string sector = std::to_string(slId.sector());
+  std::string superLayer = std::to_string(slId.superlayer());
+  std::string Step = std::to_string(step);
 
   string histoName =
-    rootBaseDir_ + "/Wheel" + wheel.str() + 
-    "/Station" + station.str() +
-    "/Sector" + sector.str() +
-    "/hResDist_STEP" + Step.str() +
-    "_W" + wheel.str() +
-    "_St" + station.str() +
-    "_Sec" + sector.str() +
-    "_SL" + superLayer.str();
+    rootBaseDir_ + "/Wheel" + wheel + "/Station" + station + "/Sector" + sector + 
+    "/hResDist_STEP" + Step + "_W" + wheel + "_St" + station + "_Sec" + sector + "_SL" + superLayer;
 
   return histoName;
 }
diff --git a/CalibMuon/DTCalibration/plugins/DTTTrigT0SegCorrection.cc b/CalibMuon/DTCalibration/plugins/DTTTrigT0SegCorrection.cc
index 3b6d921c853..1e596cc1766 100644
--- a/CalibMuon/DTCalibration/plugins/DTTTrigT0SegCorrection.cc
+++ b/CalibMuon/DTCalibration/plugins/DTTTrigT0SegCorrection.cc
@@ -66,14 +66,14 @@ string DTTTrigT0SegCorrection::getHistoName(const DTSuperLayerId& slId) {
   DTChamberId chId = slId.chamberId();
 
   // Compose the chamber name
-  stringstream wheel; wheel << chId.wheel();
-  stringstream station; station << chId.station();
-  stringstream sector; sector << chId.sector();
+  std::string wheel = std::to_string(chId.wheel());
+  std::string station = std::to_string(chId.station());
+  std::string sector = std::to_string(chId.sector());
 
   string chHistoName =
-    "_W" + wheel.str() +
-    "_St" + station.str() +
-    "_Sec" + sector.str();
+    "_W" + wheel +
+    "_St" + station +
+    "_Sec" +  sector;
 
   return (slId.superLayer() != 2)?("hRPhiSegT0"+chHistoName):("hRZSegT0"+chHistoName);
 }
diff --git a/CalibMuon/DTCalibration/plugins/DTTTrigWriter.cc b/CalibMuon/DTCalibration/plugins/DTTTrigWriter.cc
index b5d4904cb00..348dc659a74 100644
--- a/CalibMuon/DTCalibration/plugins/DTTTrigWriter.cc
+++ b/CalibMuon/DTCalibration/plugins/DTTTrigWriter.cc
@@ -130,10 +130,7 @@ void DTTTrigWriter::endJob() {
 
 // Compute the name of the time box histo
 string DTTTrigWriter::getTBoxName(const DTSuperLayerId& slId) const {
-  string histoName;
-  stringstream theStream;
-  theStream << "Ch_" << slId.wheel() << "_" << slId.station() << "_" << slId.sector()
-	    << "_SL" << slId.superlayer() << "_hTimeBox";
-  theStream >> histoName;
+  string histoName = "Ch_" + std::to_string(slId.wheel()) + "_" + std::to_string(slId.station())
+                     + "_" + std::to_string(slId.sector()) + "_SL" + std::to_string(slId.superlayer()) + "_hTimeBox";
   return histoName;
 }
diff --git a/CalibMuon/DTCalibration/plugins/DTVDriftSegment.cc b/CalibMuon/DTCalibration/plugins/DTVDriftSegment.cc
index fea6369c769..c1f5b6ba666 100644
--- a/CalibMuon/DTCalibration/plugins/DTVDriftSegment.cc
+++ b/CalibMuon/DTCalibration/plugins/DTVDriftSegment.cc
@@ -105,14 +105,14 @@ string DTVDriftSegment::getHistoName(const DTSuperLayerId& slId) {
   DTChamberId chId = slId.chamberId();
 
   // Compose the chamber name
-  stringstream wheel; wheel << chId.wheel();
-  stringstream station; station << chId.station();
-  stringstream sector; sector << chId.sector();
+  std::string wheel = std::to_string(chId.wheel());
+  std::string station = std::to_string(chId.station());
+  std::string sector = std::to_string(chId.sector());
 
   string chHistoName =
-    "_W" + wheel.str() +
-    "_St" + station.str() +
-    "_Sec" + sector.str();
+    "_W" + wheel +
+    "_St" + station +
+    "_Sec" +  sector;
 
   return (slId.superLayer() != 2)?("hRPhiVDriftCorr" + chHistoName):("hRZVDriftCorr" + chHistoName);
 }
diff --git a/CalibMuon/DTCalibration/plugins/DTVDriftSegmentCalibration.cc b/CalibMuon/DTCalibration/plugins/DTVDriftSegmentCalibration.cc
index a28dd0a7163..828bcfa548c 100644
--- a/CalibMuon/DTCalibration/plugins/DTVDriftSegmentCalibration.cc
+++ b/CalibMuon/DTCalibration/plugins/DTVDriftSegmentCalibration.cc
@@ -149,14 +149,14 @@ void DTVDriftSegmentCalibration::endJob() {
 void DTVDriftSegmentCalibration::bookHistos(DTChamberId chId) {
 
   // Compose the chamber name
-  stringstream wheel; wheel << chId.wheel();
-  stringstream station; station << chId.station();
-  stringstream sector; sector << chId.sector();
+  std::string wheel = std::to_string(chId.wheel());
+  std::string station = std::to_string(chId.station());
+  std::string sector = std::to_string(chId.sector());
 
   string chHistoName =
-    "_W" + wheel.str() +
-    "_St" + station.str() +
-    "_Sec" + sector.str();
+    "_W" + wheel +
+    "_St" + station +
+    "_Sec" +  sector;
 
   vector<TH1F*> histosTH1F;
   histosTH1F.push_back(new TH1F(("hRPhiVDriftCorr" + chHistoName).c_str(), "v-drift corr. from Phi segments", 200, -0.4, 0.4));
